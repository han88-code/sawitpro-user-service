// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Message string `json:"message"`
}

// LoginRequestBody defines model for LoginRequestBody.
type LoginRequestBody struct {
	Password    string `json:"password"`
	Phonenumber string `json:"phonenumber"`
}

// LoginSuccessResponse defines model for LoginSuccessResponse.
type LoginSuccessResponse struct {
	Id    int    `json:"id"`
	Token string `json:"token"`
}

// ProfileSuccessResponse defines model for ProfileSuccessResponse.
type ProfileSuccessResponse struct {
	Fullname    string `json:"fullname"`
	Phonenumber string `json:"phonenumber"`
}

// ProfileUpdateRequestBody defines model for ProfileUpdateRequestBody.
type ProfileUpdateRequestBody struct {
	Fullname    *string `json:"fullname,omitempty"`
	Id          int     `json:"id"`
	Phonenumber *string `json:"phonenumber,omitempty"`
}

// RegisterRequestBody defines model for RegisterRequestBody.
type RegisterRequestBody struct {
	Fullname    string `json:"fullname"`
	Password    string `json:"password"`
	Phonenumber string `json:"phonenumber"`
}

// RegisterSuccessResponse defines model for RegisterSuccessResponse.
type RegisterSuccessResponse struct {
	Id int `json:"id"`
}

// ProfileParams defines parameters for Profile.
type ProfileParams struct {
	Id int `form:"id" json:"id"`
}

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginRequestBody

// ProfileupdateJSONRequestBody defines body for Profileupdate for application/json ContentType.
type ProfileupdateJSONRequestBody = ProfileUpdateRequestBody

// RegisterJSONRequestBody defines body for Register for application/json ContentType.
type RegisterJSONRequestBody = RegisterRequestBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// This is endpoint for login user.
	// (POST /login)
	Login(ctx echo.Context) error
	// This is endpoint for get user profile.
	// (GET /profile)
	Profile(ctx echo.Context, params ProfileParams) error
	// This is endpoint for update user profile.
	// (POST /profile-update)
	Profileupdate(ctx echo.Context) error
	// This is endpoint for register new user.
	// (POST /register)
	Register(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Login(ctx)
	return err
}

// Profile converts echo context to params.
func (w *ServerInterfaceWrapper) Profile(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ProfileParams
	// ------------- Required query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, true, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Profile(ctx, params)
	return err
}

// Profileupdate converts echo context to params.
func (w *ServerInterfaceWrapper) Profileupdate(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Profileupdate(ctx)
	return err
}

// Register converts echo context to params.
func (w *ServerInterfaceWrapper) Register(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Register(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/login", wrapper.Login)
	router.GET(baseURL+"/profile", wrapper.Profile)
	router.POST(baseURL+"/profile-update", wrapper.Profileupdate)
	router.POST(baseURL+"/register", wrapper.Register)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWXU/jOBT9K9HdffSSskVIm7dlNEiMGGnEh+YB9cFNblMziW2ubZiqyn8f2UlKAknL",
	"MFDx1Ca51z455/jcrCFVpVYSpTWQrMGkSyx5+PuZSNEFGq2kQX9Dk9JIVmB4XKIxPA8P7EojJGAsCZlD",
	"VTEgvHOCMIPkZlM4Y22hmt9iaqFicK5yIS/wzqGxJypbPd9Gc2MeFGUD+zDQS4/clXOk3Ti6xexx3VFY",
	"ly5N0ZhxBkQXlJAWcyTfbdUPlLvxiAza2iEM30gtRIE7USxcUUhe4p8TtFmp37cF3LXOuMWt+m2FN8bg",
	"b8EWwxpeYC6MRXoxupL/PEeZ2yUkxxMGpZDt5ZQNMNvxZbfzqNd5zHZq0mk+nPaaDyfsdYrtcHfLzCsN",
	"/hL6KwYGU0fCri59otTrnSAnpP+df7k1zMPVqaKSW0jgy/crYHX++JXqp7BZeWmthsovLORC+f5CpNjA",
	"riWEr2dX4fwJW/jLa4MUXSLdi9QzdI9khJKQwOHB5GDiK5VGybWABKbhlifOLgPWuPAZEDhRxvpfzwy3",
	"QsmzDJI6IqCmomOvVEmLMtRzrQuRho741ij5GK/+39+EC0jgr/gxf+MmfONnqVj1SbfkMNyohQt4/51M",
	"3nb/p+4IGDI0KQltax6bkoUropqtisHRG+LoT6ABACc8ixqeas+5suS0ggSulsJEwkQoM62EtNFCUQ0y",
	"cgbpIJTHuo4xjyPHAZGbmAu+IF6iRTKQ3KzBOwPuHNIKWOu+kOd9kVjnRZ8do9k7KjgyPLZrmKMN5EQt",
	"LUHO6f7kPFU0F1mGsi9qEySB+G6E3Mw8hzs0f/pSfeX/cWGCjR/zhsim7H2O++gw3fOxf5VpamY+kmU8",
	"gv/2h+CTkotCpPYNPdtwOmBbakb3uGHb4f5OXh36qtqzTcc+X7b7tGUu7PjRB1ULNpL4sJlXwVZ0344g",
	"R0XzWZTEcaFSXiy9IapZ9SsAAP//0UusbdQNAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
